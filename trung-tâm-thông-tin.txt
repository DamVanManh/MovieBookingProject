*** TÀI KHOẢN ADMIN: 
"taiKhoan": "binh12234", "matKhau": "123",
"taiKhoan": "khai", "matKhau": "321321",
*** banner carousel 
1322 gái già lắm chiêu
1337 Lừa Đểu Gặp Lừa Đảo
1352 Thần Bịp Jack Chột
*** CÁC THƯ VIỆN BẮT BUỘC CÀI ĐỂ CHẠY:
	+ material ui: npm install @material-ui/core
	+ icon: npm install @material-ui/icons
*** cảnh báo: cảnh báo khi dispatch thay đổi thì sẽ không chạy lại useEfect, trong khi dispatch mình không cần thay đổi
*** CẤU TRÚC THƯ MỤC TRONG REACTJS
	components: Header.js, Carousel.js, lichChieu.js, cumRap.js, TinTuc.js, 
				UngDung.js, Footer.js, loading.js,
	layouts:
		+ MainLayout.js: ["/", "/phim/:movieId", "/datve/:movieId"]
			<Header />
				{props.children}
			<Footer />
		+ AdminLayout.js: ["/admin/users","/admin/movies"]
		+ AuthLayout.js: ["/dangnhap", "/dangky"]
	pages: 
		+ Homepage: 
			<Header />
			<Carousel />
			<lichChieu />
			<cumRap />
			<TinTuc />
			<UngDung />
			<Footer />
		+ Bookticket
		+ Login
		+ Register
		+ MovieDetail
		+ MoviesManagement
		+ UsersManagement

*** CẤU TRÚC ROUTER TRONG App.js
    <BrowserRouter >
      <Switch>

        {/* component hiển thị bên trong route này luôn có giao diện MainLayout( header và footer) */}
        <Route exact path={["/", "/phim/:movieId", "/datve/:movieId"]}>
          <MainLayout >
            <Switch >
              <Route exact path="/" component={Homepage} />
              <Route exact path="/phim/:movieId" component={MovieDetail} />
              <Route exact path="/datve/:movieId" component={BookTickets} />
            </Switch>
          </MainLayout>
        </Route>

        {/* component trong này chỉ cho phép truy cập khi tài khoản là admin */}
        <Route exact path={["/admin/users","/admin/movies"]}>
          <AdminLayout >
            <Switch >
              <AdminRoute exact path='/admin/users' component={UsersManagement} />
              <AdminRoute exact path='/admin/movies' component={MoviesManagement} />
            </Switch>
          </AdminLayout>
        </Route>

        {/* component hiển thị bên trong route này luôn có giao diện AuthLayout */}
        <Route exact path={["/dangnhap", "/dangky"]}>
          <AuthLayout >
            <Switch >
              <Route exact path="/dangnhap" component={Login} />
              <Route exact path="/dangky" component={Register} />
            </Switch>
          </AuthLayout>
        </Route>

        {/* khi người dùng nhập sai địa chỉ ví dụ localhost:3002/fdsf thì tự động chuyển sang trang home*/}
        <Redirect to="/" />
      </Switch>
    </BrowserRouter>
	
*** 
GET: được sử dụng để lấy thông tin từ sever theo URI đã cung cấp.
HEAD: giống với GET nhưng response trả về không có body, chỉ có header.
POST: gửi thông tin tới sever thông qua các biểu mẫu HTTP.
PUT: ghi đè tất cả thông tin của đối tượng với những gì được gửi lên.
PATCH: ghi đè các thông tin được thay đổi của đối tượng.
DELETE: xóa tài nguyên trên server.
CONNECT: thiết lập một kết nối tới server theo URI.
OPTIONS: mô tả các tùy chọn giao tiếp cho resource.
TRACE: thực hiện một bài test loop - back theo đường dẫn đến resource.


  // lấy 3 phim ngẫu nhiên ra hiển thị
  // useEffect(() => {
  //   let isMounted = true; // xử lý báo lỗi, nếu unmounted thì không thực hiện lệnh
  //   moviesApi.getDanhSachPhimTheoNgay("26/01/2021", "26/02/2021").then(
  //     result => {
  //       const max = result.data.length;
  //       const arrayRandom = [result.data[Math.floor(Math.random() * max)], result.data[Math.floor(Math.random() * max)], result.data[Math.floor(Math.random() * max)]]
  //       if (isMounted) setDanhs(arrayRandom);
  //     }
  //   )
  //     .catch(
  //       error => {
  //         if (isMounted) setDanhs(error.response.data);
  //       }
  //     )
  //   return () => { isMounted = false };
  // }, [])

// get api phim theo mã phim
    useEffect(() => {
    let isMounted = true; // xử lý báo lỗi, nếu unmounted thì không bị rò rỉ bộ nhớ
    moviesApi.getThongTinPhim("1322").then(
      result => {
        if (isMounted) setBannerList((currentBanner) => ([...currentBanner, result.data]));
      }
    )
    moviesApi.getThongTinPhim("1337").then(
      result => {
        if (isMounted) setBannerList((currentBanner) => ([...currentBanner, result.data]));
      }
    )
    moviesApi.getThongTinPhim("1352").then(
      result => {
        if (isMounted) setBannerList((currentBanner) => ([...currentBanner, result.data]));
      }
    )

    return () => { isMounted = false };
  }, [])
  
  
  
  
heThongRapChieu: [{maHeThongRap: 'BHDStar', tenHeThongRap, cumRapChieu: [{}]}, {maHeThongRap: 'galaxy', tenHeThongRap, cumRapChieu: [{}]} ] 
* maHeThongRap, tenHeThongRap
* cần lấy tất cả cumRapChieu có chiếu phim này: 
	const aray = heThongRapChieu.reduce((total, item) => { return [...total, ...item.cumRapChieu  ], [])

cumRapChieu[{tenCumRap: '3/2', lichChieuPhim: [{}]}, {tenCumRap: 'Bitexco', lichChieuPhim: [{}]}]
* 

lichChieuPhim[
{maLichChieu: "40809", maRap: "451", tenRap: "Rạp 1", ngayChieuGioChieu: "2020-12-11T20:00:00", giaVe: 75000, thoiLuong: 120}
{maLichChieu: "40809", maRap: "451", tenRap: "Rạp 1", ngayChieuGioChieu: "2020-12-11T20:00:00", giaVe: 75000, thoiLuong: 120}
]


2021-02-22T14:00:00